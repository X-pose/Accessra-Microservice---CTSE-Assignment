name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create .env file
        run: |
          echo "PROD_DB_HOST=${{ secrets.PROD_DB_HOST }}" >> .env
          echo "PROD_DB_PORT=${{ secrets.PROD_DB_PORT }}" >> .env
          echo "PROD_DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}" >> .env
          echo "PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> .env
          echo "PROD_DB_NAME=${{ secrets.PROD_DB_NAME }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}
          SONAR_PROJECT_KEY: ChillBroh_Accessra-API
          SONAR_ORGANIZATION: chillbroh

      - name: Build Docker Image
        run: docker build -t chillbroh98/accessra .

      - name: Login to docker hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Publish image to docker hub
        run: docker push chillbroh98/accessra:latest

  deploy:
    needs: build
    runs-on: self-hosted

    steps:
      - name: Pull image from docker hub
        run: docker pull chillbroh98/accessra:latest

      - name: Delete old container
        run: docker rm -f accessra-app-container || true

      - name: Run docker container
        run: docker run -d -p 4000:4000 --name accessra-app-container chillbroh98/accessra


#
#  build:
#    needs: test
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Setup Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: '20.x'
#          cache: 'npm'
#
#      - name: Install dependencies
#        run: npm ci
#
#      - name: Build
#        run: npm run build
#
#      - name: Upload build artifacts
#        uses: actions/upload-artifact@v3
#        with:
#          name: dist
#          path: dist/
#
#  deploy:
#    needs: build
#    runs-on: ubuntu-latest
#    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Download build artifacts
#        uses: actions/download-artifact@v3
#        with:
#          name: dist
#          path: dist/
#
#      - name: Setup Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: '20.x'
#
#      - name: Install production dependencies
#        run: npm ci --production
#
#      - name: Deploy to production
#        run: |
#          echo "Deploying to production..."
#          # Add actual deployment commands (e.g. rsync, scp, SSH to server, Render/AWS CLI commands etc.)
#        env:
#          NODE_ENV: production
