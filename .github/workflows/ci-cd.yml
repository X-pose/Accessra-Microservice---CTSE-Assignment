name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: 🛎 Checkout code
        uses: actions/checkout@v3

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            backend/accessra_microservice/package-lock.json
            frontend/package-lock.json

      - name: Install Microservice dependencies
        working-directory: backend/accessra_microservice
        run: npm ci

      - name: Run backend tests
        working-directory: backend/accessra_microservice
        run: npm test

      - name: Install Frontend dependencies & run tests
        working-directory: frontend
        run: |
          npm ci
          npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: 🛎 Checkout code
        uses: actions/checkout@v3

      - name: 🔖 Set version based on timestamp and commit SHA
        id: set_version
        run: |
          VERSION="$(date +'%Y%m%d')-${GITHUB_SHA::7}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: ⚙️ Setup Node.js for Microservice
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: backend/accessra_microservice/package-lock.json

      - name: Install Microservice dependencies
        working-directory: backend/accessra_microservice
        run: npm ci

      - name: SonarCloud Scan (Microservice)
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: backend/accessra_microservice
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

      # Build frontend regardless of where changes were detected
      - name: ⚙️ Setup Node.js for Frontend
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Frontend dependencies and build
        working-directory: frontend
        run: |
          npm ci
          npm run build

      # Safely create .env file without logging sensitive values
      - name: 🔒 Create .env file for Docker build
        run: |
          mkdir -p backend
          echo "Creating .env file with secrets (values hidden)"
          echo "PROD_DB_HOST=\"\$PROD_DB_HOST\"" > backend/.env
          echo "PROD_DB_PORT=\"\$PROD_DB_PORT\"" >> backend/.env
          echo "PROD_DB_USERNAME=\"\$PROD_DB_USERNAME\"" >> backend/.env
          echo "PROD_DB_PASSWORD=\"\$PROD_DB_PASSWORD\"" >> backend/.env
          echo "PROD_DB_NAME=\"\$PROD_DB_NAME\"" >> backend/.env
          echo "JWT_SECRET=\"\$JWT_SECRET\"" >> backend/.env
          
          # Replace placeholders with actual values
          sed -i "s/\"\\\$PROD_DB_HOST\"/\"${{ secrets.PROD_DB_HOST }}\"/" backend/.env
          sed -i "s/\"\\\$PROD_DB_PORT\"/\"${{ secrets.PROD_DB_PORT }}\"/" backend/.env
          sed -i "s/\"\\\$PROD_DB_USERNAME\"/\"${{ secrets.PROD_DB_USERNAME }}\"/" backend/.env
          sed -i "s/\"\\\$PROD_DB_PASSWORD\"/\"${{ secrets.PROD_DB_PASSWORD }}\"/" backend/.env
          sed -i "s/\"\\\$PROD_DB_NAME\"/\"${{ secrets.PROD_DB_NAME }}\"/" backend/.env
          sed -i "s/\"\\\$JWT_SECRET\"/\"${{ secrets.JWT_SECRET }}\"/" backend/.env

      - name: Copy frontend build to backend nginx directory
        run: |
          mkdir -p backend/nginx/statics/
          cp -R frontend/dist/* backend/nginx/statics/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push versioned and latest Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            chillbroh98/accessra:${{ steps.set_version.outputs.version }}
            chillbroh98/accessra:latest
          cache-from: type=registry,ref=chillbroh98/accessra:latest
          cache-to: type=inline

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: 🛎 Checkout code
        uses: actions/checkout@v3

      - name: Create deployment directory
        run: mkdir -p deployment

      - name: Generate docker-compose.yml with version
        run: |
          cat <<EOF > deployment/docker-compose.yml
          version: '3.8'
          services:
            backend:
              image: chillbroh98/accessra:${{ needs.build.outputs.version }}
              restart: always
              environment:
                - PROD_DB_HOST=${{ secrets.PROD_DB_HOST }}
                - PROD_DB_PORT=${{ secrets.PROD_DB_PORT }}
                - PROD_DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}
                - PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
                - PROD_DB_NAME=${{ secrets.PROD_DB_NAME }}
                - JWT_SECRET=${{ secrets.JWT_SECRET }}
              ports:
                - "8080:8080"
              networks:
                - app-network
              healthcheck:
                test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
                interval: 30s
                timeout: 10s
                retries: 3
                start_period: 40s
          
          networks:
            app-network:
              driver: bridge
          EOF

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Deploy with docker-compose
        working-directory: deployment
        run: |
          docker-compose pull
          docker-compose up -d

      - name: Wait for services to be healthy
        run: |
          echo "Waiting for services to be healthy..."
          sleep 30
          
          # Check if backend service is running
          if ! docker-compose -f deployment/docker-compose.yml ps | grep -q "backend.*Up"; then
            echo "Backend service failed to start properly!"
            docker-compose -f deployment/docker-compose.yml logs
            exit 1
          fi
          
          echo "Deployment successful and services are running!"

      - name: Create rollback script
        run: |
          cat <<EOF > deployment/rollback.sh
          #!/bin/bash
          echo "Rolling back to previous version..."
          docker-compose -f docker-compose.yml down
          docker pull chillbroh98/accessra:${{ needs.build.outputs.version }}
          docker-compose -f docker-compose.yml up -d
          echo "Rollback completed."
          EOF
          chmod +x deployment/rollback.sh
          echo "Created rollback script for version ${{ needs.build.outputs.version }}"