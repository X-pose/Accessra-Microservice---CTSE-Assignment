name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: üõé Checkout code
        uses: actions/checkout@v3

      - name: üîí Create .env in backend root
        run: |
          mkdir -p backend
          cat <<EOF > backend/.env
          PROD_DB_HOST=${{ secrets.PROD_DB_HOST }}
          PROD_DB_PORT=${{ secrets.PROD_DB_PORT }}
          PROD_DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}
          PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          PROD_DB_NAME=${{ secrets.PROD_DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EOF

      - name: ‚öôÔ∏è Setup Node.js for Microservice
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Microservice dependencies
        working-directory: backend/accessra_microservice
        run: npm ci

      - name: SonarCloud Scan (Microservice)
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: backend/accessra_microservice
        env:
          SONAR_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_PROJECT_KEY: ChillBroh_Accessra-API
          SONAR_ORGANIZATION: chillbroh

      - name: Build Docker Image
        working-directory: backend
        run: docker build -t chillbroh98/accessra:latest .

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Publish image to Docker Hub
        run: docker push chillbroh98/accessra:latest

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: üõé Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # To enable diff detection

      - name: üîí Recreate .env in backend root
        run: |
          mkdir -p backend
          cat <<EOF > backend/.env
          PROD_DB_HOST=${{ secrets.PROD_DB_HOST }}
          PROD_DB_PORT=${{ secrets.PROD_DB_PORT }}
          PROD_DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}
          PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}
          PROD_DB_NAME=${{ secrets.PROD_DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          EOF

      - name: üîç Detect frontend changes
        id: detect_frontend
        run: |
          CHANGED=$(git diff --name-only HEAD^ HEAD)
          echo "changed_files=$CHANGED" >> $GITHUB_OUTPUT

      - name: ‚öôÔ∏è Setup Node.js for Frontend
        if: contains(steps.detect_frontend.outputs.changed_files, 'frontend/')
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: üèóÔ∏è Build frontend & copy static assets
        if: contains(steps.detect_frontend.outputs.changed_files, 'frontend/')
        run: |
          cd frontend
          npm ci
          npm run build
          mkdir -p ../backend/nginx/statics/
          rm -rf ../backend/nginx/statics/*
          cp -R dist/* ../backend/nginx/statics/

      - name: üîë Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üì• Pull all images & Deploy backend
        working-directory: backend
        run: |
          docker-compose pull
          docker-compose up -d