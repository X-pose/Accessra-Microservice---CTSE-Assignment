# name: CI/CD Pipeline

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: 🛎 Checkout code
        uses: actions/checkout@v3

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            backend/accessra_microservice/package-lock.json
            frontend/package-lock.json

      - name: Install Microservice dependencies
        working-directory: backend/accessra_microservice
        run: npm ci

      - name: Create env file
        working-directory: backend/accessra_microservice
        run: |
          echo "PROD_DB_HOST=${{ secrets.PROD_DB_HOST }}" >> .env
          echo "PROD_DB_PORT=${{ secrets.PROD_DB_PORT }}" >> .env
          echo "PROD_DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}" >> .env
          echo "PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> .env
          echo "PROD_DB_NAME=${{ secrets.PROD_DB_NAME }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

      - name: Run backend tests
        working-directory: backend/accessra_microservice
        run: npm run test:e2e
        env:
          PROD_DB_HOST: ${{ secrets.PROD_DB_HOST }}
          PROD_DB_PORT: ${{ secrets.PROD_DB_PORT }}
          PROD_DB_USERNAME: ${{ secrets.PROD_DB_USERNAME }}
          PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          PROD_DB_NAME: ${{ secrets.PROD_DB_NAME }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    steps:
      - name: 🛎 Checkout code
        uses: actions/checkout@v3

      - name: 🔖 Set version based on timestamp and commit SHA
        id: set_version
        run: |
          VERSION="$(date +'%Y%m%d')-${GITHUB_SHA::7}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: ⚙️ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: |
            backend/accessra_microservice/package-lock.json
            frontend/package-lock.json

      - name: Install backend dependencies
        working-directory: backend/accessra_microservice
        run: npm ci

      - name: Install Frontend dependencies and build
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: SonarCloud Scan (Microservice)
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: backend/accessra_microservice
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_CLOUD_TOKEN }}
          SONAR_PROJECT_KEY: X-pose_Accessra-Microservice---CTSE-Assignment
          SONAR_ORGANIZATION: x-pose

      - name: 🔒 Create .env file for Docker build
        run: |
          echo "PROD_DB_HOST=${{ secrets.PROD_DB_HOST }}" >> backend/.env
          echo "PROD_DB_PORT=${{ secrets.PROD_DB_PORT }}" >> backend/.env
          echo "PROD_DB_USERNAME=${{ secrets.PROD_DB_USERNAME }}" >> backend/.env
          echo "PROD_DB_PASSWORD=${{ secrets.PROD_DB_PASSWORD }}" >> backend/.env
          echo "PROD_DB_NAME=${{ secrets.PROD_DB_NAME }}" >> backend/.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> backend/.env

      - name: Copy frontend build to backend nginx directory
        run: |
          mkdir -p backend/nginx/statics/
          cp -R frontend/dist/* backend/nginx/statics/

      # # Build frontend regardless of where changes were detected
      # - name: ⚙️ Setup Node.js for Frontend
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '20'
      #     cache: 'npm'
      #     cache-dependency-path: frontend/package-lock.json

      # run: |
      #   mkdir -p backend
      #   echo "Creating .env file with secrets (values hidden)"
      #   echo "PROD_DB_HOST=\"\$PROD_DB_HOST\"" > backend/.env
      #   echo "PROD_DB_PORT=\"\$PROD_DB_PORT\"" >> backend/.env
      #   echo "PROD_DB_USERNAME=\"\$PROD_DB_USERNAME\"" >> backend/.env
      #   echo "PROD_DB_PASSWORD=\"\$PROD_DB_PASSWORD\"" >> backend/.env
      #   echo "PROD_DB_NAME=\"\$PROD_DB_NAME\"" >> backend/.env
      #   echo "JWT_SECRET=\"\$JWT_SECRET\"" >> backend/.env

      #   # Replace placeholders with actual values
      #   sed -i "s/\"\\\$PROD_DB_HOST\"/\"${{ secrets.PROD_DB_HOST }}\"/" backend/.env
      #   sed -i "s/\"\\\$PROD_DB_PORT\"/\"${{ secrets.PROD_DB_PORT }}\"/" backend/.env
      #   sed -i "s/\"\\\$PROD_DB_USERNAME\"/\"${{ secrets.PROD_DB_USERNAME }}\"/" backend/.env
      #   sed -i "s/\"\\\$PROD_DB_PASSWORD\"/\"${{ secrets.PROD_DB_PASSWORD }}\"/" backend/.env
      #   sed -i "s/\"\\\$PROD_DB_NAME\"/\"${{ secrets.PROD_DB_NAME }}\"/" backend/.env
      #   sed -i "s/\"\\\$JWT_SECRET\"/\"${{ secrets.JWT_SECRET }}\"/" backend/.env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push versioned and latest Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/accessra_microservice
          push: true
          tags: |
            chillbroh98/accessra:${{ steps.set_version.outputs.version }}
            chillbroh98/accessra:latest
          cache-from: type=registry,ref=chillbroh98/accessra:latest
          cache-to: type=inline

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Download task definition
        run: aws ecs describe-task-definition --task-definition accessra-task --query taskDefinition --output json > task-definition.json

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Prepare clean task definition and update image
        run: |
          # Create a clean task definition by removing fields AWS doesn't allow on re-registration
          jq 'del(.taskDefinitionArn, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .revision, .enableFaultInjection)' task-definition.json > clean-task-def.json

          # Update the image URI in the container definition
          CONTAINER_NAME="accessra-app"
          # Update the image URI and inject environment variables
          jq --arg IMAGE "chillbroh98/accessra:latest" --arg NAME "$CONTAINER_NAME" \
            --arg PROD_DB_HOST "${{ secrets.PROD_DB_HOST }}" \
            --arg PROD_DB_PORT "${{ secrets.PROD_DB_PORT }}" \
            --arg PROD_DB_USERNAME "${{ secrets.PROD_DB_USERNAME }}" \
            --arg PROD_DB_PASSWORD "${{ secrets.PROD_DB_PASSWORD }}" \
            --arg PROD_DB_NAME "${{ secrets.PROD_DB_NAME }}" \
            --arg JWT_SECRET "${{ secrets.JWT_SECRET }}" \
            '
            .containerDefinitions |= map(
              if .name == $NAME then
                .image = $IMAGE |
                .environment = [
                  { "name": "PROD_DB_HOST", "value": $PROD_DB_HOST },
                  { "name": "PROD_DB_PORT", "value": $PROD_DB_PORT },
                  { "name": "PROD_DB_USERNAME", "value": $PROD_DB_USERNAME },
                  { "name": "PROD_DB_PASSWORD", "value": $PROD_DB_PASSWORD },
                  { "name": "PROD_DB_NAME", "value": $PROD_DB_NAME },
                  { "name": "JWT_SECRET", "value": $JWT_SECRET }
                ]
              else .
              end
            )
            ' clean-task-def.json > updated-task-def.json

      - name: Register new task definition with AWS CLI
        id: register-task-def
        run: |
          NEW_TASK_DEFINITION=$(aws ecs register-task-definition --cli-input-json file://updated-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task_definition_arn=$NEW_TASK_DEFINITION" >> $GITHUB_OUTPUT

      - name: Deploy to ECS with AWS CLI
        run: |
          aws ecs update-service --cluster accessra-cluster \
                                --service accessra-only-service \
                                --task-definition ${{ steps.register-task-def.outputs.task_definition_arn }} \
                                --force-new-deployment

      - name: Wait for service stability
        run: aws ecs wait services-stable --cluster accessra-cluster --services accessra-only-service
  #        echo "Deployment completed successfully!"

  notify:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Notify deployment success
        run: echo "Deployment to ECS completed successfully!"
